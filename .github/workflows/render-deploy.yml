name: Docker Build and Deploy to Render

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: RENDER_API_KEY

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker build -t dashboard-backend -f Dockerfile .
          docker build -t dashboard-frontend -f Dockerfile.frontend .

      - name: Get Owner ID
        id: owner
        run: |
          echo "Getting owner ID..."
          OWNER_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            https://api.render.com/v1/owners)
          echo "Owner response: $OWNER_RESPONSE"
          OWNER_ID=$(echo $OWNER_RESPONSE | jq -r '.[0].owner.id')
          OWNER_NAME=$(echo $OWNER_RESPONSE | jq -r '.[0].owner.name')
          echo "Found owner ID: $OWNER_ID (Workspace: $OWNER_NAME)"
          echo "owner_id=$OWNER_ID" >> $GITHUB_OUTPUT

      - name: Delete existing services
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          # Get list of services
          SERVICES=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/services)

          # Extract service IDs for our services
          BACKEND_ID=$(echo $SERVICES | jq -r '.[] | select(.service.name=="dashboard-backend") | .service.id')
          FRONTEND_ID=$(echo $SERVICES | jq -r '.[] | select(.service.name=="dashboard-frontend") | .service.id')

          # Delete backend service if it exists
          if [ ! -z "$BACKEND_ID" ]; then
            echo "Deleting existing backend service..."
            curl -s -X DELETE -H "Authorization: Bearer $RENDER_API_KEY" \
              "https://api.render.com/v1/services/$BACKEND_ID"
            # Wait for deletion to complete
            sleep 10
          fi

          # Delete frontend service if it exists
          if [ ! -z "$FRONTEND_ID" ]; then
            echo "Deleting existing frontend service..."
            curl -s -X DELETE -H "Authorization: Bearer $RENDER_API_KEY" \
              "https://api.render.com/v1/services/$FRONTEND_ID"
            # Wait for deletion to complete
            sleep 10
          fi

      - name: Deploy to Render and verify
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          OWNER_ID="${{ steps.owner.outputs.owner_id }}"
          echo "Using owner ID: $OWNER_ID"

          # Deploy backend service and capture response
          echo "Deploying backend service..."
          BACKEND_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST https://api.render.com/v1/services \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "type": "web_service",
              "name": "dashboard-backend",
              "ownerId": "'"$OWNER_ID"'",
              "repo": "https://github.com/JiyauddinSaiyad/real-time-dashboard-ss.git",
              "env": "docker",
              "region": "ohio",
              "plan": "starter",
              "branch": "main",
              "autoDeploy": "yes",
              "serviceDetails": {
                "env": "docker",
                "dockerCommand": "node server.js",
                "numInstances": 1,
                "healthCheckPath": "/health",
                "envVars": [
                  {
                    "key": "NODE_ENV",
                    "value": "production"
                  }
                ]
              }
            }')

          BACKEND_HTTP_CODE=$(echo "$BACKEND_RESPONSE" | tail -n1)
          if [ "$BACKEND_HTTP_CODE" -ne 200 ] && [ "$BACKEND_HTTP_CODE" -ne 201 ]; then
            echo "Backend deployment failed with status: $BACKEND_HTTP_CODE"
            echo "Response: $BACKEND_RESPONSE"
            exit 1
          fi
          echo "Backend deployment initiated successfully"

          # Deploy frontend service and capture response
          echo "Deploying frontend service..."
          FRONTEND_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST https://api.render.com/v1/services \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "type": "web_service",
              "name": "dashboard-frontend",
              "ownerId": "'"$OWNER_ID"'",
              "repo": "https://github.com/JiyauddinSaiyad/real-time-dashboard-ss.git",
              "env": "docker",
              "region": "ohio",
              "plan": "starter",
              "branch": "main",
              "autoDeploy": "yes",
              "serviceDetails": {
                "env": "docker",
                "dockerCommand": "nginx -g '\''daemon off;'\''",
                "numInstances": 1,
                "healthCheckPath": "/health",
                "envVars": [
                  {
                    "key": "NODE_ENV",
                    "value": "production"
                  }
                ]
              }
            }')

          FRONTEND_HTTP_CODE=$(echo "$FRONTEND_RESPONSE" | tail -n1)
          if [ "$FRONTEND_HTTP_CODE" -ne 200 ] && [ "$FRONTEND_HTTP_CODE" -ne 201 ]; then
            echo "Frontend deployment failed with status: $FRONTEND_HTTP_CODE"
            echo "Response: $FRONTEND_RESPONSE"
            exit 1
          fi
          echo "Frontend deployment initiated successfully"

          echo "Both services deployed successfully. Check Render dashboard for deployment status."
